Repository Description:
All-pair set similarity search on millions of sets in Python and on a laptop 

Pull Request Description:
Allow input to be any iterable

Code:
File: SetSimilaritySearch/all_pairs.py
Changes:
@@ -1,6 +1,7 @@
 import logging
 from collections import defaultdict
 import numpy as np
+from collections.abc import Iterable
 
 from SetSimilaritySearch.utils import _frequency_order_transform, \
         _similarity_funcs, _overlap_threshold_funcs, _position_filter_funcs, \
@@ -25,8 +26,8 @@ def all_pairs(sets, similarity_func_name="jaccard",
         pairs (Iterator[tuple]): an iterator of tuples `(x, y, similarity)`
             where `x` and `y` are the indices of sets in the input list `sets`.
     """
-    if not isinstance(sets, list) or len(sets) == 0:
-        raise ValueError("Input parameter sets must be a non-empty list.")
+    if not isinstance(sets, Iterable) or len(sets) == 0:
+        raise ValueError("Input parameter sets must be a non-empty iterable.")
     if similarity_func_name not in _similarity_funcs:
         raise ValueError("Similarity function {} is not supported.".format(
             similarity_func_name))

File: SetSimilaritySearch/search.py
Changes:
@@ -1,6 +1,7 @@
 import logging
 from collections import defaultdict, deque
 import numpy as np
+from collections.abc import Iterable
 
 from SetSimilaritySearch.utils import _frequency_order_transform, \
         _similarity_funcs, _overlap_threshold_funcs, _position_filter_funcs, \
@@ -24,8 +25,8 @@ class SearchIndex(object):
 
     def __init__(self, sets, similarity_func_name="jaccard",
             similarity_threshold=0.5):
-        if not isinstance(sets, list) or len(sets) == 0:
-            raise ValueError("Input parameter sets must be a non-empty list.")
+        if not isinstance(sets, Iterable) or len(sets) == 0:
+            raise ValueError("Input parameter sets must be a non-empty iterable.")
         if similarity_func_name not in _similarity_funcs:
             raise ValueError("Similarity function {} is not supported.".format(
                 similarity_func_name))

